#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sample_1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="inventory_db")]
	public partial class disposeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertchemical_tab(chemical_tab instance);
    partial void Updatechemical_tab(chemical_tab instance);
    partial void Deletechemical_tab(chemical_tab instance);
    partial void InsertdisposeChemical_tab(disposeChemical_tab instance);
    partial void UpdatedisposeChemical_tab(disposeChemical_tab instance);
    partial void DeletedisposeChemical_tab(disposeChemical_tab instance);
    #endregion
		
		public disposeDataContext() : 
				base(global::sample_1.Properties.Settings.Default.inventory_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public disposeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public disposeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public disposeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public disposeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<chemical_tab> chemical_tabs
		{
			get
			{
				return this.GetTable<chemical_tab>();
			}
		}
		
		public System.Data.Linq.Table<disposeChemical_tab> disposeChemical_tabs
		{
			get
			{
				return this.GetTable<disposeChemical_tab>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.chemical_tab")]
	public partial class chemical_tab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Chemical_ID;
		
		private string _Chemical_Name;
		
		private System.Nullable<decimal> _amount;
		
		private string _unit;
		
		private string _chemical_Type;
		
		private System.Nullable<System.DateTime> _expiryDate;
		
		private System.Nullable<System.DateTime> _DateAndTime;
		
		private EntitySet<disposeChemical_tab> _disposeChemical_tabs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChemical_IDChanging(int value);
    partial void OnChemical_IDChanged();
    partial void OnChemical_NameChanging(string value);
    partial void OnChemical_NameChanged();
    partial void OnamountChanging(System.Nullable<decimal> value);
    partial void OnamountChanged();
    partial void OnunitChanging(string value);
    partial void OnunitChanged();
    partial void Onchemical_TypeChanging(string value);
    partial void Onchemical_TypeChanged();
    partial void OnexpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnexpiryDateChanged();
    partial void OnDateAndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAndTimeChanged();
    #endregion
		
		public chemical_tab()
		{
			this._disposeChemical_tabs = new EntitySet<disposeChemical_tab>(new Action<disposeChemical_tab>(this.attach_disposeChemical_tabs), new Action<disposeChemical_tab>(this.detach_disposeChemical_tabs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chemical_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Chemical_ID
		{
			get
			{
				return this._Chemical_ID;
			}
			set
			{
				if ((this._Chemical_ID != value))
				{
					this.OnChemical_IDChanging(value);
					this.SendPropertyChanging();
					this._Chemical_ID = value;
					this.SendPropertyChanged("Chemical_ID");
					this.OnChemical_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chemical_Name", DbType="VarChar(50)")]
		public string Chemical_Name
		{
			get
			{
				return this._Chemical_Name;
			}
			set
			{
				if ((this._Chemical_Name != value))
				{
					this.OnChemical_NameChanging(value);
					this.SendPropertyChanging();
					this._Chemical_Name = value;
					this.SendPropertyChanged("Chemical_Name");
					this.OnChemical_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit", DbType="VarChar(3)")]
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				if ((this._unit != value))
				{
					this.OnunitChanging(value);
					this.SendPropertyChanging();
					this._unit = value;
					this.SendPropertyChanged("unit");
					this.OnunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chemical_Type", DbType="VarChar(50)")]
		public string chemical_Type
		{
			get
			{
				return this._chemical_Type;
			}
			set
			{
				if ((this._chemical_Type != value))
				{
					this.Onchemical_TypeChanging(value);
					this.SendPropertyChanging();
					this._chemical_Type = value;
					this.SendPropertyChanged("chemical_Type");
					this.Onchemical_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> expiryDate
		{
			get
			{
				return this._expiryDate;
			}
			set
			{
				if ((this._expiryDate != value))
				{
					this.OnexpiryDateChanging(value);
					this.SendPropertyChanging();
					this._expiryDate = value;
					this.SendPropertyChanged("expiryDate");
					this.OnexpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAndTime
		{
			get
			{
				return this._DateAndTime;
			}
			set
			{
				if ((this._DateAndTime != value))
				{
					this.OnDateAndTimeChanging(value);
					this.SendPropertyChanging();
					this._DateAndTime = value;
					this.SendPropertyChanged("DateAndTime");
					this.OnDateAndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="chemical_tab_disposeChemical_tab", Storage="_disposeChemical_tabs", ThisKey="Chemical_ID", OtherKey="Chemical_ID")]
		public EntitySet<disposeChemical_tab> disposeChemical_tabs
		{
			get
			{
				return this._disposeChemical_tabs;
			}
			set
			{
				this._disposeChemical_tabs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_disposeChemical_tabs(disposeChemical_tab entity)
		{
			this.SendPropertyChanging();
			entity.chemical_tab = this;
		}
		
		private void detach_disposeChemical_tabs(disposeChemical_tab entity)
		{
			this.SendPropertyChanging();
			entity.chemical_tab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.disposeChemical_tab")]
	public partial class disposeChemical_tab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DisposeID;
		
		private System.Nullable<int> _Chemical_ID;
		
		private System.Nullable<System.DateTime> _dateAndTime;
		
		private EntityRef<chemical_tab> _chemical_tab;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisposeIDChanging(int value);
    partial void OnDisposeIDChanged();
    partial void OnChemical_IDChanging(System.Nullable<int> value);
    partial void OnChemical_IDChanged();
    partial void OndateAndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OndateAndTimeChanged();
    #endregion
		
		public disposeChemical_tab()
		{
			this._chemical_tab = default(EntityRef<chemical_tab>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisposeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DisposeID
		{
			get
			{
				return this._DisposeID;
			}
			set
			{
				if ((this._DisposeID != value))
				{
					this.OnDisposeIDChanging(value);
					this.SendPropertyChanging();
					this._DisposeID = value;
					this.SendPropertyChanged("DisposeID");
					this.OnDisposeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chemical_ID", DbType="Int")]
		public System.Nullable<int> Chemical_ID
		{
			get
			{
				return this._Chemical_ID;
			}
			set
			{
				if ((this._Chemical_ID != value))
				{
					if (this._chemical_tab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChemical_IDChanging(value);
					this.SendPropertyChanging();
					this._Chemical_ID = value;
					this.SendPropertyChanged("Chemical_ID");
					this.OnChemical_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateAndTime
		{
			get
			{
				return this._dateAndTime;
			}
			set
			{
				if ((this._dateAndTime != value))
				{
					this.OndateAndTimeChanging(value);
					this.SendPropertyChanging();
					this._dateAndTime = value;
					this.SendPropertyChanged("dateAndTime");
					this.OndateAndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="chemical_tab_disposeChemical_tab", Storage="_chemical_tab", ThisKey="Chemical_ID", OtherKey="Chemical_ID", IsForeignKey=true)]
		public chemical_tab chemical_tab
		{
			get
			{
				return this._chemical_tab.Entity;
			}
			set
			{
				chemical_tab previousValue = this._chemical_tab.Entity;
				if (((previousValue != value) 
							|| (this._chemical_tab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._chemical_tab.Entity = null;
						previousValue.disposeChemical_tabs.Remove(this);
					}
					this._chemical_tab.Entity = value;
					if ((value != null))
					{
						value.disposeChemical_tabs.Add(this);
						this._Chemical_ID = value.Chemical_ID;
					}
					else
					{
						this._Chemical_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("chemical_tab");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
